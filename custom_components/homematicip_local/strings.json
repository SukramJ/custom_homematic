{
  "config": {
    "abort": {},
    "error": {
      "cannot_connect": "Failed to connect",
      "invalid_auth": "Invalid authentication",
      "invalid_password": "Invalid password",
      "unknown": "Unexpected error"
    },
    "flow_title": "{name}/{host}",
    "step": {
      "central": {
        "data": {
          "callback_host": "Callback Hostname/IP-Address",
          "callback_port": "Callback XML-RPC Port",
          "enable_system_notifications": "Enable system notifications",
          "host": "CCU Hostname/IP-Address",
          "instance_name": "Integration instance name",
          "json_port": "JSON-RPC Port",
          "password": "CCU Password",
          "sysvar_scan_enabled": "enable Sysvar scan",
          "sysvar_scan_interval": "Sysvar/Program scan interval",
          "tls": "use TLS",
          "username": "CCU Username",
          "verify_tls": "verify TLS connection"
        },
        "description": "Please fill the required fields."
      },
      "interface": {
        "data": {
          "bidcos_rf_enabled": "enable Homematic (Bidcos-RF)",
          "bidcos_rf_port": "HM-RF Port",
          "bidcos_wired_enabled": "enable BidCos-Wired (HM-Wired)",
          "bidcos_wired_port": "BidCos-Wired Port",
          "hmip_rf_enabled": "enable Homematic IP",
          "hmip_rf_port": "HmIP-RF Port",
          "virtual_devices_enabled": "enable Groups (Heating-Group)",
          "virtual_devices_path": "Groups Path",
          "virtual_devices_port": "Groups Port"
        },
        "description": "Configure the interfaces to CCU"
      }
    }
  },
  "device_automation": {
    "action_type": {
      "press_long": "Long press Button \"{subtype}\"",
      "press_short": "Short press Button \"{subtype}\""
    },
    "trigger_type": {
      "press": "Button \"{subtype}\" pressed",
      "press_cont": "Button \"{subtype}\" continuously pressed",
      "press_lock": "Lock button \"{subtype}\" pressed",
      "press_long": "Button \"{subtype}\" long pressed",
      "press_long_release": "Button \"{subtype}\" long press released",
      "press_long_start": "Button \"{subtype}\" started long press",
      "press_short": "Button \"{subtype}\" pressed",
      "press_unlock": "Unlock button \"{subtype}\" pressed"
    }
  },
  "entity": {
    "binary_sensor": {
      "acoustic_alarm_active": {
        "name": "Acoustic Alarm Active"
      },
      "alarmstate": {
        "name": "Alarmstate"
      },
      "blocked_permanent": {
        "name": "Blocked permanent"
      },
      "blocked_temporary": {
        "name": "Blocked temporary"
      },
      "current_passage_direction": {
        "name": "Passage Direction"
      },
      "dew_point_alarm": {
        "name": "Dew Point Alarm"
      },
      "duty_cycle": {
        "name": "Duty Cycle"
      },
      "dutycycle": {
        "name": "Duty Cycle"
      },
      "emergency_operation": {
        "name": "Emergency Operation"
      },
      "error_jammed": {
        "name": "Error Jammed"
      },
      "heater_state": {
        "name": "Heater State"
      },
      "humidity_alarm": {
        "name": "Humidity Alarm"
      },
      "last_passage_direction": {
        "name": "Last Passage Direction"
      },
      "low_bat": {
        "name": "Battery"
      },
      "lowbat": {
        "name": "Battery"
      },
      "lowbat_sensor": {
        "name": "Battery"
      },
      "moisture_detected": {
        "name": "Moisture Detected"
      },
      "motion": {
        "name": "Motion"
      },
      "optical_alarm_active": {
        "name": "Optical Alarm Active"
      },
      "power_mains_failure": {
        "name": "Power Mains Failure"
      },
      "presence_detection_state": {
        "name": "Presence Detection State"
      },
      "process": {
        "name": "Process"
      },
      "raining": {
        "name": "Raining"
      },
      "sabotage": {
        "name": "Sabotage"
      },
      "sabotage_sticky": {
        "name": "Sabotage sticky"
      },
      "state": {
        "name": ""
      },
      "user_authorization_01": {
        "name": "User authorization 1"
      },
      "user_authorization_02": {
        "name": "User authorization 2"
      },
      "user_authorization_03": {
        "name": "User authorization 3"
      },
      "user_authorization_04": {
        "name": "User authorization 4"
      },
      "user_authorization_05": {
        "name": "User authorization 5"
      },
      "user_authorization_06": {
        "name": "User authorization 6"
      },
      "user_authorization_07": {
        "name": "User authorization 7"
      },
      "user_authorization_08": {
        "name": "User authorization 8"
      },
      "waterlevel_detected": {
        "name": "Waterlevel Detected"
      },
      "window_state": {
        "name": "Window State"
      },
      "working": {
        "name": "Working"
      }
    },
    "button": {
      "reset_motion": {
        "name": "Reset Motion"
      },
      "reset_presence": {
        "name": "Reset Presence"
      }
    },
    "climate": {
      "hmip_climate": {
        "state_attributes": {
          "preset_mode": {
            "state": {
              "week_program_1": "WP 1",
              "week_program_2": "WP 2",
              "week_program_3": "WP 3",
              "week_program_4": "WP 4",
              "week_program_5": "WP 5",
              "week_program_6": "WP 6"
            }
          }
        }
      }
    },
    "event": {
      "homematic_keypress": {
        "state_attributes": {
          "event_type": {
            "state": {
              "press": "Pressed",
              "press_cont": "Continuously pressed",
              "press_lock": "Lock pressed",
              "press_long": "Long pressed",
              "press_long_release": "Long press released",
              "press_long_start": "Long press started",
              "press_short": "Short pressed",
              "press_unlock": "Unlock pressed"
            }
          }
        }
      }
    },
    "number": {
      "frequency": {
        "name": "Frequency"
      },
      "level": {
        "name": "Level"
      },
      "level_2": {
        "name": "Level 2"
      }
    },
    "sensor": {
      "activity_state": {
        "name": "Activity State"
      },
      "actual_humidity": {
        "name": "Humidity"
      },
      "actual_temperature": {
        "name": "Temperature"
      },
      "air_pressure": {
        "name": "Air Pressure"
      },
      "average_illumination": {
        "name": "Average Illumination"
      },
      "battery_state": {
        "name": "Battery State"
      },
      "brightness": {
        "name": "Brightness"
      },
      "carrier_sense_level": {
        "name": "Carrier Sense Level"
      },
      "color": {
        "name": "Color"
      },
      "concentration": {
        "name": "Concentration"
      },
      "current": {
        "name": "Current"
      },
      "current_illumination": {
        "name": "Illumination"
      },
      "dewpoint": {
        "name": "Dewpoint"
      },
      "direction": {
        "name": "Direction",
        "state": {
          "down": "Down",
          "none": "",
          "undefined": "Undefined",
          "up": "Up"
        }
      },
      "door_state": {
        "name": "Door State",
        "state": {
          "closed": "Closed",
          "open": "Open",
          "position_unknown": "Position unknown",
          "ventilation_position": "Ventilation position"
        }
      },
      "duty_cycle_level": {
        "name": "Duty Cycle Level"
      },
      "energy_counter": {
        "name": "Energy Counter"
      },
      "error": {
        "name": "Error"
      },
      "filling_level": {
        "name": "Filling Level"
      },
      "frequency": {
        "name": "Frequency"
      },
      "gas_energy_counter": {
        "name": "Gas Energy Counter"
      },
      "gas_power": {
        "name": "Gas Power"
      },
      "highest_illumination": {
        "name": "Highest Illumination"
      },
      "humidity": {
        "name": "Humidity"
      },
      "iec_energy_counter": {
        "name": "IEC Energy Counter"
      },
      "iec_power": {
        "name": "IEC Power"
      },
      "illumination": {
        "name": "Illumination"
      },
      "ip_address": {
        "name": "IP Address"
      },
      "level": {
        "name": "Level"
      },
      "level_2": {
        "name": "Level 2"
      },
      "lock_state": {
        "name": "Lock State",
        "state": {
          "locked": "Locked",
          "unknown": "Unknown",
          "unlocked": "Unlocked"
        }
      },
      "lowest_illumination": {
        "name": "Lowest Illumination"
      },
      "lux": {
        "name": "Lux"
      },
      "mass_concentration_pm_1": {
        "name": "Mass Concentration PM 1"
      },
      "mass_concentration_pm_10": {
        "name": "Mass Concentration PM 10"
      },
      "mass_concentration_pm_10_24h_average": {
        "name": "Mass Concentration PM 10 24h Average"
      },
      "mass_concentration_pm_1_24h_average": {
        "name": "Mass Concentration PM 1 24h Average"
      },
      "mass_concentration_pm_2_5": {
        "name": "Mass Concentration PM 2.5"
      },
      "mass_concentration_pm_2_5_24h_average": {
        "name": "Mass Concentration PM 2.5 24h Average"
      },
      "number_concentration_pm_1": {
        "name": "Number Concentration PM 1"
      },
      "number_concentration_pm_10": {
        "name": "Number Concentration PM 10"
      },
      "number_concentration_pm_2_5": {
        "name": "Number Concentration PM 2.5"
      },
      "operating_voltage": {
        "name": "Operating Voltage"
      },
      "passage_counter_value": {
        "name": "Passage Counter Value"
      },
      "power": {
        "name": "Power"
      },
      "rain_counter": {
        "name": "Rain Counter"
      },
      "rssi_device": {
        "name": "RSSI Device"
      },
      "rssi_peer": {
        "name": "RSSI Peer"
      },
      "sec_direction": {
        "name": "Direction",
        "state": {
          "down": "Opening",
          "none": "",
          "undefined": "Undefined",
          "up": "Closing"
        }
      },
      "sec_key_error": {
        "name": "Error",
        "state": {
          "clutch_failure": "Clutch failure",
          "motor_aborted": "Motor aborted",
          "no_error": "No error"
        }
      },
      "sec_win_error": {
        "name": "Error",
        "state": {
          "motor_tilt_error": "Motor tilt error",
          "motor_turn_error": "Motor turn error",
          "no_error": "No error"
        }
      },
      "sec_win_status": {
        "name": "",
        "state": {
          "charge": "Charge",
          "discharge": "Discharge",
          "state_unknown": "State unknown",
          "trickle_charge": "Trickle charge"
        }
      },
      "smoke_detector_alarm_status": {
        "name": "Smoke Detector Alarm Status",
        "state": {
          "idle_off": "Idle off",
          "intrusion_alarm": "Intrusion alarm",
          "primary_alarm": "Primary alarm",
          "secondary_alarm": "Secondary alarm"
        }
      },
      "srh_state": {
        "name": "",
        "state": {
          "closed": "Closed",
          "open": "Open",
          "tilted": "Tilted"
        }
      },
      "state": {
        "name": ""
      },
      "status": {
        "name": ""
      },
      "sunshineduration": {
        "name": "Sunshineduration"
      },
      "temperature": {
        "name": "Temperature"
      },
      "typical_particle_size": {
        "name": "Typical Particle Size"
      },
      "value": {
        "name": "Value"
      },
      "valve_state": {
        "name": "Valve State"
      },
      "vapor_concentration": {
        "name": "Vapor Concentration"
      },
      "voltage": {
        "name": "Voltage"
      },
      "wind_dir": {
        "name": "Wind Dir"
      },
      "wind_dir_range": {
        "name": "Wind Dir Range"
      },
      "wind_direction": {
        "name": "Wind Direction"
      },
      "wind_direction_range": {
        "name": "Wind Direction Range"
      },
      "wind_speed": {
        "name": "Wind Speed"
      },
      "wkp_code_state": {
        "name": "Code Status",
        "state": {
          "idle": "idle",
          "known_code_id_received": "known code id received",
          "unknown_code_detected": "unknown code detected"
        }
      }
    },
    "switch": {
      "inhibit": {
        "name": "Inhibit"
      },
      "motion_detection_active": {
        "name": "Motion Detection Active"
      },
      "presence_detection_active": {
        "name": "Presence Detection Active"
      },
      "state": {
        "name": ""
      }
    }
  },
  "issues": {
    "xmlrpc_server_receives_no_events": {
      "title": "XmlRPC-Server received no events.",
      "description": "Callback for {interface_id} has not received events for {seconds_since_last_event}s.\n\nThis Integration tries an automatic reconnect."
    },
    "ping_pong_mismatch": {
      "title": "Ping/Pong Mismatch on Interface",
      "description": "There is a mismatch between send ping events and received pong events for HA instance {instance_name}.\n\nPossible reasons:\n - You are running multiple instances of HA with the same instance name configured for this integration. Re-add one instance! Otherwise one HA instance will not receive update events from your CCU.\n - Something is stuck on CCU, so try a restart."
    },
    "interface_not_reachable": {
      "title": "Interface {interface_id} not reachable",
      "description": "No connection to interface {interface_id}.\n\nThis Integration tries an automatic reconnect.\n\nCheck the Home Assistant log files for more details."
    }
  },
  "options": {
    "abort": {},
    "error": {
      "cannot_connect": "Failed to connect",
      "invalid_auth": "Invalid authentication",
      "invalid_password": "Invalid password",
      "unknown": "Unexpected error"
    },
    "step": {
      "central": {
        "data": {
          "callback_host": "Callback Hostname/IP-Address",
          "callback_port": "Callback XML-RPC Port",
          "enable_system_notifications": "Enable system notifications",
          "host": "CCU Hostname/IP-Address",
          "json_port": "JSON-RPC Port",
          "password": "CCU Password",
          "sysvar_scan_enabled": "enable Sysvar scan",
          "sysvar_scan_interval": "Sysvar/Program scan interval",
          "tls": "use TLS",
          "username": "CCU Username",
          "verify_tls": "verify TLS connection"
        },
        "description": "Re-Configure the CCU"
      },
      "interface": {
        "data": {
          "bidcos_rf_enabled": "enable Homematic (Bidcos-RF)",
          "bidcos_rf_port": "HM-RF Port",
          "bidcos_wired_enabled": "enable BidCos-Wired (HM-Wired)",
          "bidcos_wired_port": "BidCos-Wired Port",
          "hmip_rf_enabled": "enable Homematic IP",
          "hmip_rf_port": "HmIP-RF Port",
          "virtual_devices_enabled": "enable Groups (Heating-Group)",
          "virtual_devices_path": "Groups Path",
          "virtual_devices_port": "Groups Port"
        },
        "description": "Re-Configure the interfaces to CCU"
      }
    }
  },
  "services": {
    "clear_cache": {
      "name": "Clear the cache",
      "description": "Clear the cache. Requires a restart.",
      "fields": {
        "entry_id": {
          "name": "Central",
          "description": "Name(s) of homematic central to clear the cache."
        }
      }
    },
    "delete_device": {
      "name": "Delete a device",
      "description": "Delete a device from HA.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        }
      }
    },
    "export_device_definition": {
      "name": "Export device definition",
      "description": "Export a device definition to 'Your home-assistant config directory'/homematicip_local/export*.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        }
      }
    },
    "fetch_system_variables": {
      "name": "Fetch system variables",
      "description": "Fetch system variables from backend.",
      "fields": {
        "entry_id": {
          "name": "Central",
          "description": "Name(s) of homematic central to fetch system variables from."
        }
      }
    },
    "force_device_availability": {
      "name": "Force device availability",
      "description": "Force a device to be available, this will override the real state.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        },
        "device_address": {
          "name": "Device address",
          "description": "Enter a device address."
        }
      }
    },
    "get_device_value": {
      "name": "Get device value",
      "description": "Get a device value on RPC XML interface.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        },
        "device_address": {
          "name": "Device address",
          "description": "Enter a device address."
        },
        "channel": {
          "name": "Channel",
          "description": "Channel for calling a parameter."
        },
        "parameter": {
          "name": "Parameter",
          "description": "Parameter to get i.e STATE."
        }
      }
    },
    "get_paramset": {
      "name": "Get paramset",
      "description": "Call to getParamset in the RPC XML interface.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        },
        "device_address": {
          "name": "Device address",
          "description": "Enter a device address."
        },
        "channel": {
          "name": "Channel",
          "description": "Channel for calling a paramset."
        },
        "paramset_key": {
          "name": "Paramset key",
          "description": "The paramset_key argument to getParamset."
        }
      }
    },
    "set_variable_value": {
      "name": "Set variable value",
      "description": "Write a value to a variable.",
      "fields": {
        "entry_id": {
          "name": "Central",
          "description": "Name(s) of homematic central to set value."
        },
        "name": {
          "name": "Name",
          "description": "Name of the variable to set."
        },
        "value": {
          "name": "Value",
          "description": "New value"
        }
      }
    },
    "set_device_value": {
      "name": "Set device value",
      "description": "Set a device parameter via the XML-RPC interface.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        },
        "device_address": {
          "name": "Device address",
          "description": "Enter a device address."
        },
        "channel": {
          "name": "Channel",
          "description": "Channel for calling a parameter."
        },
        "parameter": {
          "name": "Parameter",
          "description": "Parameter to send i.e STATE."
        },
        "value": {
          "name": "Value",
          "description": "New value."
        },
        "value_type": {
          "name": "Value type",
          "description": "Type for new value."
        },
        "rx_mode": {
          "name": "RX mode",
          "description": "The receive mode used."
        }
      }
    },
    "set_install_mode": {
      "name": "Set install mode",
      "description": "Set a RPC XML interface into installation mode.",
      "fields": {
        "interface_id": {
          "name": "Interface",
          "description": "Select the given interface into install mode."
        },
        "mode": {
          "name": "Mode",
          "description": "1= Normal mode / 2= Remove exists old links."
        },
        "time": {
          "name": "Time",
          "description": "Time to run in install mode."
        },
        "address": {
          "name": "Address",
          "description": "Address of homematic device or BidCoS-RF to learn."
        }
      }
    },
    "put_paramset": {
      "name": "Put paramset",
      "description": "Call to putParamset on the RPC XML interface.",
      "fields": {
        "device_id": {
          "name": "Device",
          "description": "Select a device."
        },
        "device_address": {
          "name": "Device address",
          "description": "Enter a device address."
        },
        "channel": {
          "name": "Channel",
          "description": "Channel for calling a paramset."
        },
        "paramset_key": {
          "name": "Paramset key",
          "description": "The paramset_key argument to putParamset."
        },
        "paramset": {
          "name": "Paramset",
          "description": "A paramset dictionary."
        },
        "rx_mode": {
          "name": "RX mode",
          "description": "The receive mode used."
        }
      }
    },
    "enable_away_mode_by_calendar": {
      "name": "Enable climate away mode by calendar",
      "description": "Enable climate away mode by calendar.",
      "fields": {
        "start": {
          "name": "Start time",
          "description": "The time when the away mode should automatically be enabled."
        },

        "end": {
          "name": "End time",
          "description": "The time when the away mode should automatically be disabled."
        },
        "away_temperature": {
          "name": "Set point temperature",
          "description": "The temperature for the away mode."
        }
      }
    },
    "enable_away_mode_by_duration": {
      "name": "Enable climate away mode by duration",
      "description": "Enable climate away mode by duration.",
      "fields": {
        "hours": {
          "name": "Hours",
          "description": "The number of hours after the away mode should automatically be disabled."
        },
        "away_temperature": {
          "name": "Set point temperature",
          "description": "The temperature for the away mode."
        }
      }
    },
    "disable_away_mode": {
      "name": "Disable climate away mode",
      "description": "Disable climate away mode."
    },
    "turn_on_siren": {
      "name": "Turn on siren",
      "description": "Turn siren on.",
      "fields": {
        "tone": {
          "name": "Tone",
          "description": "The tone to emit when turning the siren on."
        },
        "light": {
          "name": "Light",
          "description": "The light to emit when turning the siren on."
        },
        "duration": {
          "name": "Duration",
          "description": "The duration in seconds of the noise to emit when turning the siren on."
        }
      }
    },
    "light_set_on_time": {
      "name": "Set light on time",
      "description": "Set on time for a light entity. Must be followed by a light.turn_on.",
      "fields": {
        "on_time": {
          "name": "On Time",
          "description": "On time for a light in seconds. Use 0 to reset the on time."
        }
      }
    },
    "switch_set_on_time": {
      "name": "Set switch on time",
      "description": "Set on time for a switch entity. Must be followed by a switch.turn_on.",
      "fields": {
        "on_time": {
          "name": "On Time",
          "description": "On time for a switch in seconds. Use 0 to reset the on time."
        }
      }
    },
    "set_cover_combined_position": {
      "name": "Set cover combined position",
      "description": "Move a blind to a specific position and tilt position.",
      "fields": {
        "position": {
          "name": "Position",
          "description": "Position of the cover."
        },
        "tilt_position": {
          "name": "Tilt position",
          "description": "Tilt position of the cover."
        }
      }
    },
    "update_device_firmware_data": {
      "name": "Update device firmware data",
      "description": "Update device firmware data for all homematic data.",
      "fields": {
        "entry_id": {
          "name": "Central",
          "description": "Name(s) of homematic central to update the device firmware data for."
        }
      }
    }
  }
}
